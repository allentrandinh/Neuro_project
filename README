core_functions.py contains frequently used functions

Python files/results are organized into numbered folder (01-..., 02-...)

Folders Information and Summary:

01-
- initial attempt
- position drawn randomly from uniform distribution
- Setting: 5 bursts/sec (all 5 happen at the same time), 100 um in dendritic length, 100 mins total
- 100mintotal_5_burstpersec.png: contour plot
- burst_distribution.png: frequency (y-axis) that each dendritic location (x-axis) were chosen in generating the burst history

02-
- burst.py: codes generating figures
- number of bursts per second drawn from poisson distribution
- position drawn randomly from uniform distribution
- Setting: 5 bursts/sec,
- burst_history.png: screenshot of sample burst_history generated by the poisson_burst_history function.The number before “:” specifies the timestamp and the array after “:” specifies the random locations of all bursts happening at that time.
- Figure_1.png: how frequently each dendritic distance is drawn as a burst location
- Figure_2.png: the spatial, temporal protein profile

Function_testings:
- 2burst_same_time.png: the result when simulating 2 bursts at x=200 and x=300 at t=0.
- 4burst_same2locations.png :the result when simulating 4 bursts (burst 1: t=0, x=200; burst 2: t=0,x=300; burst 3: t=60,x=200; burst 4: t=60,x=300). It seemed that if we have 2 burst at the same location but in different time, the red area will elongate.
- 4burst_sametime.png: the result when simulating 4 bursts happening at the same time but different location (t=0, x=200,250,300,330). No longer see the clear distinction between areas of individual bursts.

03-
- Attempt to see how long it will take to reach the steady state protein level with 0.5 bursts/s at x=50um
- result/random_x50_05Hz.png: protein profile over time at x=50um, position drawn randomly
- result/x50_0.5Hz.png: protein profile over time at x=50um following simplified method
- Simplification: calculate time it needs to have 100 bursts (delta_t) and generate 100 bursts at the same time (at all dendritic locations) after every delta_t seconds
- Due to time constraint, calculation was broken down into smaller part, temporary result was temporarily saved in data folder. To keep track of the process, result file include both the final calculated timestamp and protein concentration.

04-
- Attempt to see how long it will take to reach the steady state protein level with different burst frequency at x=50um
- Simplification: calculate time it needs to have 100 bursts and generate 100 bursts at the same time (at all dendritic locations). Ex: with freq = 5Hz -> 100 bursts at t=0, t=20, t=40 since 100/5=20 -> delta t = 20s
- burstrate_comparison.py: code generating the protein profile
- Due to time constraint, calculation was broken down into smaller part. To keep track of the process, the protein profile file (x50_...Hz.txt) include both the final calculated timestamp and protein concentration.
- comparison_plot: code generating the plot
- compare_burstrate.png and compare_burstrate_2.png: result plots. Since 10 bursts/sec takes a longer time to generate, it was truncated due to time limit

05-
- interval between 2 consecutive bursts drawn from Poisson distribution. Timestamp of each burst are calculated by adding the interval time accumulatively
- locations drawn randomly from uniform distribution
- burst_history_generator.py generates and saves the burst history
- burst_history_analyzing.py generates the plot to see the structure of burst history (results are the next 4 figs)
- result/5hz_burstfrequencies.png and result/halfHzfreq.png: frequencies (y-axis) of number of bursts/s (x-axis)
- result/5Hz_locationfrequencies.png and result/halfHzlocationfreq: frequencies (y-axis) of bursts location (x-axis)
- protein_profile.py calculates the protein profile. Due to time constraint, function was written in such a way that it can continue previously left calculation. Also utilized several cores to speed up the calculation.
- result/0.5Hz_proteinprofile.png: protein profile in 0.5Hz scenario (number of datapoints used for the plot: 6 dendirtic location x 5 time points = 30 total)

06-
- Setting: 0.05 burst/s <-> 20s per burst, interval time drawn from Poisson distribution, location drawn from uniform distribution
- history_generator.py creates a history of burst and store in data/
- protein_profile.py calculates the protein profile. Function was written in such a way that it can continue previously left calculation. Also utilized several cores to speed up the calculation.
- graph.py draws the contour plot using data generated earlier
- result/0.05Hz_proteinprofile.png: protein profile at 0.05Hz at described setting. It does look like the protein reached a plateau
- result/0.05Hz_proteinprofile_zoomin.png: zoom in plot of top image
Note:

07-
- threshold.py writes down the protein contribution of burst at x=0,t=0 to 3 different location in 10hrs time frame -> cut off point arbitrarily to be 10**-4 ((t=787, x=100))
- Note: With arbitrary threshold, calculation cannot speed up since each calculation still needs to be done before comparing to the threshold -> generating the protein contribution at all position and find where it cross the threshold
-



Other files:
FinalVersionOnServer/: codes for the lab's original paper
test_python/: contains testing codes

